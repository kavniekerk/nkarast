#include "UMDetectorConstruction.hh"

#include "G4Box.hh"
#include "G4Tubs.hh"

#include "G4LogicalVolume.hh"
#include "G4VPhysicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"
#include "globals.hh"
#include "G4ThreeVector.hh"
#include "G4Material.hh"
#include "G4VSolid.hh"
#include "G4ExtrudedSolid.hh"
#include "G4SubtractionSolid.hh"

#include "G4NistManager.hh"

#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4ios.hh"

#include "G4SDManager.hh"
#include "G4VSensitiveDetector.hh"
#include "UMSD.hh"

#include "G4PhysicalConstants.hh"  // use these instead of globals.hh for units
#include "G4SystemOfUnits.hh"

#include "G4PVParameterised.hh"


#include "UMConfig.hh"


UMDetectorConstruction::UMDetectorConstruction()
{
    
}

//
UMDetectorConstruction::~UMDetectorConstruction()
{
    G4cout << "Deleting det construction .. " << G4endl;
}

//
G4VPhysicalVolume* UMDetectorConstruction::Construct()
{
    DefineMaterials();
    return ConstructDetector();
}



G4double UMDetectorConstruction::calculateDensity(G4double molWeightA, G4double perCentA, G4double molWeightB, G4double perCentB){
    
    G4cout << " [INFO] UMDetectorConstruction : Calculating densities in STP... " << G4endl;
    G4cout << " [INFO] UMDetectorConstruction : Make sure the input is correct: " << G4endl;
    G4cout << " [INFO] UMDetectorConstruction : Gas A : (Molecular Weight: " << molWeightA << "g/mol, perCentage: "<< perCentA << ")"<< G4endl;
    G4cout << " [INFO] UMDetectorConstruction : Gas B : (Molecular Weight: " << molWeightB << "g/mol, perCentage: "<< perCentB << ")"<< G4endl;
    
    G4double density;
    density = ((molWeightA*perCentA + molWeightB*perCentB)/22.4)/**mg/cm3*/;
    
    
    G4cout << " [INFO] UMDetectorConstruction : Total density in STP = " << density << " mg/cm3 " << G4endl;
    
    return density;
    //    return 0;
    
}



//--------------------------------------------------------Materials' Definition------------------------------------------------------------------
void UMDetectorConstruction::DefineMaterials()
{
    
    UMConfig config;
    
    G4String name, symbol;
    G4double density, fractionmass;
    G4double a,z;        // a : standard atomic weight, z : atomic number
    G4int ncomponents, natoms;
    G4double temperature, pressure;
    
    
    //-------------elements
    
    a = 1.008*g/mole;
    G4Element* elH  = new G4Element(name="Hydrogen",symbol="H" , z= 1., a);
    a = 12.00*g/mole;
    G4Element* elC  = new G4Element(name="Carbon"  ,symbol="C" , z= 6., a);
    a = 14.00*g/mole;
    G4Element* elN  = new G4Element(name="Nitrogen"  ,symbol="N" , z= 7., a);
    a = 16.00*g/mole;
    G4Element* elO  = new G4Element(name="Oxygen"  ,symbol="O" , z= 8., a);
    a = 22.99*g/mole;
    G4Element* elNa  = new G4Element(name="Sodium"  ,symbol="Na" , z= 11., a);
    a = 24.31*g/mole;
    G4Element* elMg  = new G4Element(name="Magnesium"  ,symbol="Mg" , z= 12., a);
    a = 26.98*g/mole;
    G4Element* elAl = new G4Element(name="Aluminum" ,symbol="Al" , z= 13., a);
    a = 28.09*g/mole;
    G4Element* elSi = new G4Element(name="Silicon" ,symbol="Si" , z= 14., a);
    a=58.693*g/mole;
    G4Element* elNi = new G4Element(name="Nickel", symbol="Ni", z=28., a);
    a = 54.9381*g/mole;
    G4Element* elMn = new G4Element(name="Manganese", symbol="Mn", z=25., a);
    a = 51.9961*g/mole;
    G4Element* elCr = new G4Element(name="Chromium", symbol="Cr", z=24., a);
    a = 35.45*g/mole;
    G4Element* elCl = new G4Element(name="Clorine" ,symbol="Cl" , z= 17., a);
    a = 39.95*g/mole;
    G4Element* elAr  = new G4Element(name="Argon",symbol="Ar" , z= 18., a);
    //~ a = 39.098*g/mole;
    //~ G4Element* K  = new G4Element(name="Potassium",symbol="K" , z= 19., a);
    a = 40.08*g/mole;
    G4Element* elCa = new G4Element(name="Calsium",symbol="Ca" , z= 20., a);
    a = 55.845*g/mole;
    G4Element* elFe = new G4Element(name="Iron" ,symbol="Fe" , z= 26., a);
    a = 63.546*g/mole;
    G4Element* elCu = new G4Element(name="Copper" ,symbol="Cu" , z= 29., a);
    
    
    
    //--------------materials
    
    
    // Get nist material manager
    G4NistManager* nist = G4NistManager::Instance();
    Air = nist->FindOrBuildMaterial("G4_AIR");
    
    Kapton = nist->FindOrBuildMaterial("G4_KAPTON");
    
    Mylar = nist->FindOrBuildMaterial("G4_MYLAR");
    
    Al = nist->FindOrBuildMaterial("G4_Al");
    C = nist->FindOrBuildMaterial("G4_C");
    Cu = nist->FindOrBuildMaterial("G4_Cu");
    Zn = nist->FindOrBuildMaterial("G4_Zn");
    Fe = nist->FindOrBuildMaterial("G4_Fe");
    Na2O = nist->FindOrBuildMaterial("G4_SODIUM_MONOXIDE");
    SiO2 = nist->FindOrBuildMaterial("G4_SILICON_DIOXIDE");
    StainlessSteel = nist->FindOrBuildMaterial("G4_STAINLESS-STEEL");
    
    density = 1.25053*mg/cm3;       // STP
    G4Material* N2 = new G4Material(name="N2"  , density, ncomponents=1, kStateGas);
    N2->AddElement(elN, 2);
    
    density = 1.4289*mg/cm3;       // STP
    G4Material* O2 = new G4Material(name="O2"  , density, ncomponents=1, kStateGas);
    O2->AddElement(elO, 2);
    
    Al2O3 = nist->FindOrBuildMaterial("G4_ALUMINUM_OXIDE");
    CO2 = nist->FindOrBuildMaterial("G4_CARBON_DIOXIDE");
    MgO = nist->FindOrBuildMaterial("G4_MAGNESIUM_OXIDE");
    CaO = nist->FindOrBuildMaterial("G4_CALCIUM_OXIDE");
    
    
    density = 1.7836*mg/cm3;       // STP
    ArgonGas = new G4Material(name="Argon"  , density, ncomponents=1, kStateGas);
    ArgonGas->AddElement(elAr, 1);
    
    
    
    density = calculateDensity(config.ArMolWeight, config.ArPerCent_norm, config.CO2MolWeight, config.CO2PerCent_norm);
    //    density= 1.7961*mg/cm3;
    G4cout << density << G4endl;
    density = density*mg/cm3;
    ArCO2 = new G4Material(name="ArCO2", density, ncomponents=2 ,kStateGas ,temperature ,pressure);
    ArCO2->AddMaterial(ArgonGas, fractionmass=config.ArPerCent_perCent);
    ArCO2->AddMaterial(CO2, fractionmass=config.CO2PerCent_perCent);
    
    
    density = 3.97*g/cm3;
    Epoxy = new G4Material(name="C3H5ClO",density, ncomponents=4);
    Epoxy->AddElement(elC, natoms=3);
    Epoxy->AddElement(elH, natoms=5);
    Epoxy->AddElement(elO, natoms=1);
    Epoxy->AddElement(elCl, natoms=1);
    
    density=1.09*g/cm3;
    G10 = new G4Material(name="G10",density, ncomponents=6);
    G10->AddMaterial(Na2O, fractionmass=0.110);
    G10->AddMaterial(CaO, fractionmass=0.032);
    G10->AddMaterial(Al2O3, fractionmass=0.007);
    G10->AddMaterial(SiO2, fractionmass=0.474);
    G10->AddMaterial(MgO, fractionmass=0.026);
    G10->AddMaterial(Epoxy, fractionmass=0.351);
    
    density = 3.182*g/cm3;
    ResStripMat = new G4Material(name ="ResStripMat", density, ncomponents=2);
    ResStripMat->AddMaterial(Epoxy, fractionmass=60.*perCent);
    ResStripMat->AddMaterial(C, fractionmass=40.*perCent);
    
    density = 8.40*g/cm3;
    Brass = new G4Material(name ="Brass", density, ncomponents=2);
    Brass->AddMaterial(Cu, fractionmass=70.*perCent);
    Brass->AddMaterial(Zn, fractionmass=30.*perCent);
    
    
    // debug materials
    // G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//---------------------------------------------------------Detector Construction-------------------------------------------------
G4VPhysicalVolume* UMDetectorConstruction::ConstructDetector()
{
    
    // Define some sizes, for the user to change:
    UMConfig config;
    
    G4bool checkOverlaps = false;  // this makes the software slower but checks for overlaps during coding phase
    
    
    // define rotations
    G4RotationMatrix *rm=new G4RotationMatrix;
    rm->rotateX(90*deg);
    
    G4RotationMatrix *rmY=new G4RotationMatrix;
    rmY->rotateY(90*deg);
    
    
    // define gas volumes
    G4double gas1_halfX = (8.*config.insulator_block_halfX+config.amplification_gap+config.mesh_outer_radius)/2.;
    G4double gas1_halfY = config.active_area_halfY;
    G4double gas1_halfZ = config.active_area_halfZ;
    
    G4double gas2_halfX = config.drift_gap/2.;
    G4double gas2_halfY = config.active_area_halfY;
    G4double gas2_halfZ = config.active_area_halfZ;
    
    G4double gas3_halfX = config.frame_halfX-gas1_halfX-gas2_halfX;
    G4double gas3_halfY = config.active_area_halfY;
    G4double gas3_halfZ = config.active_area_halfZ;
    
    G4double gas4_halfX = gas1_halfX+gas2_halfX+gas3_halfX;
    G4double gas4_halfY = config.frame_hole_halfY;
    G4double gas4_halfZ = (config.frame_hole_halfZ-config.active_area_halfZ)/2.;
    
    G4double gas5_halfX = gas4_halfX;
    G4double gas5_halfY = gas4_halfY;
    G4double gas5_halfZ = gas4_halfZ;
    
    G4double gas6_halfX = gas4_halfX;
    G4double gas6_halfY = (config.frame_hole_halfY-config.active_area_halfY)/2.;
    G4double gas6_halfZ = config.active_area_halfZ;
    
    G4double gas7_halfX = gas6_halfX;
    G4double gas7_halfY = gas6_halfY;
    G4double gas7_halfZ = gas6_halfZ;
    
    
    // --------------------
    //
    // ---- WORLD VOLUME
    //
    // --------------------
    
    G4VSolid* world= new G4Box("World", config.world_halfX, config.world_halfY, config.world_halfZ);
    G4LogicalVolume* world_logical= new G4LogicalVolume(world, Air, "WorldLogic");
    G4VPhysicalVolume* world_physical = new G4PVPlacement(0,               // no rotation
                                                          G4ThreeVector(), // at (0,0,0)
                                                          world_logical,      // its logical volume
                                                          "World",         // its name
                                                          0,               // its mother  volume
                                                          false,           // no boolean operations
                                                          0);              // copy number
    
    
    
    // --------------------
    //
    // ---- DETECTOR VOLUME
    //
    // --------------------
    G4VSolid *detectorVol = new G4Box("Detector", config.detectorVol_halfX, config.detectorVol_halfY, config.detectorVol_halfZ);
    G4LogicalVolume *detectorVol_logical = new G4LogicalVolume(detectorVol, Air, "DetectorLogic");
    G4VPhysicalVolume *detectorVol_physical = new G4PVPlacement(0, G4ThreeVector(), detectorVol_logical, "Detector", world_logical,false,0,checkOverlaps);
    
    
    
    // --------------------
    //
    // ---- PCB VOLUME
    //
    // --------------------
    G4VSolid *pcb = new G4Box("PCB",config.pcb_halfX, config.pcb_halfY, config.pcb_halfZ);
    G4LogicalVolume *pcb_logical = new G4LogicalVolume(pcb, G10, "PCBLogic");
    G4VPhysicalVolume *pcb_physical = new G4PVPlacement(0, G4ThreeVector(), pcb_logical, "PCB", detectorVol_logical,0,false,checkOverlaps); // let's set pcb  to 0.0.0 of detector volume (== 0,0,0 of world volume)
    
    
    // I need to define 5 argon volumes
    // 1. Above PCB until "after" mesh
    // 2. Above mesh until after drift
    // 3. Above drift until frame
    // 4,5. The rest (sides) where no field can be applied
    
    // --------------------
    //
    // ---- GAS VOLUME 1
    //
    // --------------------
    G4VSolid *gas_1  = new G4Box("Gas_1", gas1_halfX, gas1_halfY, gas1_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_1_logical = new G4LogicalVolume(gas_1, ArCO2, "GasLogic1");
    G4VPhysicalVolume *gas_1_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+gas1_halfX) , config.null, config.null), gas_1_logical, "Gas1", detectorVol_logical,0,false,checkOverlaps);
    
    // readout strips
    G4VSolid *strip = new G4Box("Strip",config.strip_halfX,config.strip_halfY,config.strip_halfZ);
    G4LogicalVolume *strip_logical = new G4LogicalVolume(strip, Cu, "StripLogic");
    for(int i=-199; i<200;i++){
        //            G4VPhysicalVolume *strip_physical_pos=new G4PVPlacement(0, G4ThreeVector(pcb_halfX+strip_halfX, (i*strip_pitch),0.*um),strip_logical,"Strip",gas_logical,0,false,0);
        G4VPhysicalVolume *strip_physical=new G4PVPlacement(0, G4ThreeVector(-1.0*(gas1_halfX-config.strip_halfX), (i*config.strip_pitch), config.null),strip_logical,"StripY",gas_1_logical,false,i,checkOverlaps);
    }
    
    
    // glue 1 (block + strips)
    G4VSolid *glue_block = new G4Box("glue1", config.glue_block_halfX, config.glue_block_halfY, config.glue_block_halfZ);
    G4LogicalVolume *glue_block_logical= new G4LogicalVolume(glue_block, Epoxy, "Glue1BlockLogic");
    G4VPhysicalVolume *glue1_block_physical = new G4PVPlacement(0, G4ThreeVector(-1.0*(gas1_halfX-2.*config.strip_halfX-config.glue_block_halfX),config.null, config.null), glue_block_logical, "Glue1Block", gas_1_logical,0,false,checkOverlaps);
    
    G4VSolid *glue_strip = new G4Box("GlueStrip",config.glue_strip_halfX, config.glue_strip_halfY, config.glue_strip_halfZ);
    G4LogicalVolume *glue_strip_logical = new G4LogicalVolume(glue_strip, Epoxy, "Glue1StripLogic");
    for(int i=-200; i<200;i++){
        G4VPhysicalVolume *glue1_strip_physical = new G4PVPlacement(0, G4ThreeVector((-1.0*(gas1_halfX-config.strip_halfX)),((config.strip_pitch/2.)+(i*config.strip_pitch)), config.null), glue_strip_logical, "Glue1Strip", gas_1_logical,0,false,checkOverlaps);
    }
    
    
    // insulator 1 (block)
    G4VSolid *insulator_block = new G4Box("Insulator", config.insulator_block_halfX, config.insulator_block_halfY, config.insulator_block_halfZ);
    G4LogicalVolume *insulator_block_logical= new G4LogicalVolume(insulator_block, Kapton, "InsulatorBlockLogic");
    
    G4VPhysicalVolume *insulator1_block_physical = new G4PVPlacement(0, G4ThreeVector(-1.0*(gas1_halfX-3.*config.insulator_block_halfX),config.null, config.null), insulator_block_logical, "Insulator1Block", gas_1_logical,0,false,checkOverlaps);
    
    
    // readout strips lvl 2
    for(int i=-199; i<200;i++){
        G4VPhysicalVolume *strip_physical=new G4PVPlacement(rm, G4ThreeVector(-1.0*(gas1_halfX-4.*config.insulator_block_halfX-config.strip_halfX), config.null,(i*config.strip_pitch)),strip_logical,"StripZ",gas_1_logical,false,i,checkOverlaps);
    }
    
    // glue 2 (block + strips)
    G4VPhysicalVolume *glue2_block_physical = new G4PVPlacement(0, G4ThreeVector(-1.0*(gas1_halfX-4.*config.insulator_block_halfX- 2.*config.strip_halfX-config.glue_block_halfX),config.null, config.null), glue_block_logical, "Glue2Block", gas_1_logical,0,false,checkOverlaps);
    
    for(int i=-200; i<200;i++){
        G4VPhysicalVolume *glue2_strip_physical = new G4PVPlacement(rm, G4ThreeVector(-1.0*(gas1_halfX-4.*config.insulator_block_halfX-config.strip_halfX), config.null,((config.strip_pitch/2.)+(i*config.strip_pitch))), glue_strip_logical, "Glue2Strip", gas_1_logical,0,false,checkOverlaps);
    }
    // insulator 2 (block)
    G4VPhysicalVolume *insulator2_block_physical = new G4PVPlacement(0, G4ThreeVector(-1.0*(gas1_halfX-7.*config.insulator_block_halfX),config.null, config.null), insulator_block_logical, "Insulator2Block", gas_1_logical,0,false,checkOverlaps);
    
    //resistive strips
    G4VSolid *resistive_strip = new G4Box("Resistive_Strip",config.strip_halfX,config.strip_halfY,config.strip_halfZ);
    G4LogicalVolume *resistive_strip_logical = new G4LogicalVolume(resistive_strip, ResStripMat, "ResistiveStripLogic");
    for(int i=-199; i<200;i++){
        G4VPhysicalVolume *resistive_strip_physical=new G4PVPlacement(0, G4ThreeVector(-1.0*(gas1_halfX-8.*config.insulator_block_halfX-config.strip_halfX), (i*config.strip_pitch),config.null),resistive_strip_logical,"ResStrip",gas_1_logical,0,false,checkOverlaps);
    }
    
    
    // pillars
    G4VSolid *pillar = new G4Tubs("PillarTub",config.pillar_inner_radius, config.pillar_outer_radius, config.pillar_half_width, config.pillar_starting_angle, config.pillar_spanning_angle);
    G4LogicalVolume *pillar_logical = new G4LogicalVolume(pillar, Kapton, "PillarLogic");
    for(int y = -17; y<19; y++){
        for(int z = -17; z<19; z++){
            
            G4VPhysicalVolume *pillar_physical = new G4PVPlacement(rmY, G4ThreeVector((gas1_halfX-2.*config.mesh_outer_radius-config.pillar_half_width),(y*config.pillar_pitch),z*config.pillar_pitch), pillar_logical, "PillarTube", gas_1_logical,0,false,checkOverlaps);
            
        }
    }
    
    
    // mesh
    G4VSolid *mesh_block = new G4Box("Box", config.mesh_outer_radius, ((config.mesh_pitch-2.*config.mesh_outer_radius)/2.)+config.mesh_outer_radius, ((config.mesh_pitch-2.*config.mesh_outer_radius)/2.)+config.mesh_outer_radius);
    G4VSolid *troupa     = new G4Box("troupa", 2.*config.mesh_outer_radius, ((config.mesh_pitch-2.*config.mesh_outer_radius)/2.), ((config.mesh_pitch-2.*config.mesh_outer_radius)/2.));
    G4SubtractionSolid* mesh_square =new G4SubtractionSolid("mesh_block-troupa",mesh_block,troupa);
    G4LogicalVolume *mesh_square_logical = new G4LogicalVolume(mesh_square, StainlessSteel, "mesh_square");
    
    for(int y = -640; y<640; y++){
        for(int z = -640; z<640; z++){
            G4VPhysicalVolume *mesh_square_physical = new G4PVPlacement(0, G4ThreeVector((gas1_halfX-config.mesh_outer_radius),y*config.mesh_pitch,z*config.mesh_pitch), mesh_square_logical, "mesh_square", gas_1_logical,0,false,checkOverlaps);
            
        }
    }
    
    
    
    //     --------------------
    //
    //     ---- GAS VOLUME 2
    //
    //     --------------------
    G4VSolid *gas_2  = new G4Box("Gas_2", gas2_halfX, gas2_halfY, gas2_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_2_logical = new G4LogicalVolume(gas_2, ArCO2, "GasLogic2");
    G4VPhysicalVolume *gas_2_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+2*gas1_halfX+gas2_halfX) , config.null, config.null), gas_2_logical, "Gas2", detectorVol_logical,0,false,checkOverlaps);
    
    for(int y = -640; y<640; y++){
        for(int z = -640; z<640; z++){
            //        for(int y = -10; y<10; y++){
            //            for(int z = -10; z<10; z++){
            G4VPhysicalVolume *drift_square_physical = new G4PVPlacement(0, G4ThreeVector(gas2_halfX-config.mesh_outer_radius,y*config.mesh_pitch,z*config.mesh_pitch), mesh_square_logical, "drift_square", gas_2_logical,0,false,checkOverlaps);
        }
    }
    
    
    
    // --------------------
    //
    // ---- GAS VOLUME 3
    //
    // --------------------
    G4VSolid *gas_3  = new G4Box("Gas_3", gas3_halfX, gas3_halfY, gas3_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_3_logical = new G4LogicalVolume(gas_3, ArCO2, "GasLogic3");
    G4VPhysicalVolume *gas_3_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+2*gas1_halfX+2.*gas2_halfX+gas3_halfX) , config.null, config.null), gas_3_logical, "Gas3", detectorVol_logical,0,false,checkOverlaps);
    
    
    // --------------------
    //
    // ---- Aluminum Frame
    //
    // --------------------
    G4VSolid *frame_block = new G4Box("FrameBlock", config.frame_halfX, config.frame_halfY, config.frame_halfZ);
    G4VSolid *frame_hole  = new G4Box("FrameHole", config.frame_hole_halfX, config.frame_hole_halfY, config.frame_hole_halfZ);
    G4SubtractionSolid* frame =new G4SubtractionSolid("frame_block-frame_hole",frame_block,frame_hole);
    G4LogicalVolume *frame_logical = new G4LogicalVolume(frame, Al, "frame");
    G4VPhysicalVolume *frame_physical = new G4PVPlacement(0, G4ThreeVector(config.pcb_halfX+config.frame_halfX, config.null, config.null), frame_logical, "AlFrame", detectorVol_logical,0,false,checkOverlaps);
    
    
    
    
    
    // --------------------
    //
    // ---- GAS VOLUME 4,5 (sides towards Z)
    //
    // --------------------
    G4VSolid *gas_4  = new G4Box("Gas_4", gas4_halfX, gas4_halfY, gas4_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_4_logical = new G4LogicalVolume(gas_4, ArCO2, "GasLogic4");
    G4VPhysicalVolume *gas_4_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+gas4_halfX) , config.null, config.active_area_halfZ+gas4_halfZ), gas_4_logical, "Gas4", detectorVol_logical,0,false,checkOverlaps);
    G4VSolid *gas_5  = new G4Box("Gas_5", gas5_halfX, gas5_halfY, gas5_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_5_logical = new G4LogicalVolume(gas_5, ArCO2, "GasLogic5");
    G4VPhysicalVolume *gas_5_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+gas5_halfX) , config.null, -1.0*(config.active_area_halfZ+gas5_halfZ)), gas_5_logical, "Gas5", detectorVol_logical,0,false,checkOverlaps);
    
    // --------------------
    //
    // ---- GAS VOLUME 6,7 (sides towards Y)
    //
    // --------------------
    G4VSolid *gas_6  = new G4Box("Gas_6", gas6_halfX, gas6_halfY, gas6_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_6_logical = new G4LogicalVolume(gas_6, ArCO2, "GasLogic6");
    G4VPhysicalVolume *gas_6_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+gas6_halfX), config.active_area_halfY+gas6_halfY, config.null), gas_6_logical, "Gas6", detectorVol_logical,0,false,checkOverlaps);
    
    G4VSolid *gas_7  = new G4Box("Gas_7", gas7_halfX, gas7_halfY, gas7_halfZ); // define the gas volume to be the external window size minus the thickness of the window material
    G4LogicalVolume *gas_7_logical = new G4LogicalVolume(gas_7, ArCO2, "GasLogic5");
    G4VPhysicalVolume *gas_7_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+gas7_halfX), -1.0*(config.active_area_halfY+gas7_halfY), config.null), gas_7_logical, "Gas7", detectorVol_logical,0,false,checkOverlaps);
    
    
    // --------------------
    //
    // ---- Mylar Sheet on top of frame
    //
    // --------------------
    G4VSolid *mylar = new G4Box("Mylar",config.mylar_half_thickness, config.pcb_halfY, config.pcb_halfZ);
    G4LogicalVolume *mylar_logical = new G4LogicalVolume(mylar, Mylar, "MylarLogic");
    G4VPhysicalVolume *mylar_physical = new G4PVPlacement(0, G4ThreeVector(config.pcb_halfX+2.*config.frame_halfX+config.mylar_half_thickness, config.null, config.null), mylar_logical, "Mylar", detectorVol_logical,0,false,checkOverlaps);
    
    
    
    // --------------------
    //
    // ---- TOP PCB + BRASS
    //
    // --------------------
    G4VSolid *top_pcb_block = new G4Box("TopBlock", config.topPCB_halfX, config.topPCB_halfY, config.topPCB_halfZ );
    G4VSolid *top_brass_block = new G4Box("TopBrass", config.topBrass_halfX, config.topBrass_halfY, config.topBrass_halfZ);
    
    G4VSolid *top_hole = new G4Box("TopHole", config.topHole_halfX, config.topHole_halfY, config.topHole_halfZ);
    G4SubtractionSolid* topPCB =new G4SubtractionSolid("top_pcb_block-top_hole",top_pcb_block,top_hole);
    G4LogicalVolume *topPCB_logical = new G4LogicalVolume(topPCB, G10, "TopPCB");
    G4VPhysicalVolume *topPCB_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+2.*config.frame_halfX+2.*config.mylar_half_thickness+config.topPCB_halfX), config.null, config.null), topPCB_logical, "TopPCB", detectorVol_logical,0,false,checkOverlaps);
    
    
    G4SubtractionSolid* topBrass =new G4SubtractionSolid("top_brass_block-top_hole",top_brass_block,top_hole);
    G4LogicalVolume *topBrass_logical = new G4LogicalVolume(topBrass, Brass, "TopBrass");
    G4VPhysicalVolume *topBrass_physical = new G4PVPlacement(0, G4ThreeVector((config.pcb_halfX+2.*config.frame_halfX+2.*config.mylar_half_thickness+2.*config.topPCB_halfX+config.topBrass_halfX), config.null, config.null), topBrass_logical, "TopBrass", detectorVol_logical,0,false,checkOverlaps);
    
    
    // --------------------
    //
    //  Define sensitive detector parts
    //
    // ---------------------
    G4SDManager *SDManager = G4SDManager::GetSDMpointer();
    G4VSensitiveDetector *sensitive = new UMSD("/mydet/UMSD");
    // mono active
    SDManager->AddNewDetector(sensitive);
    gas_1_logical->SetSensitiveDetector(sensitive);
    gas_2_logical->SetSensitiveDetector(sensitive);
    gas_3_logical->SetSensitiveDetector(sensitive);
    gas_4_logical->SetSensitiveDetector(sensitive);
    gas_5_logical->SetSensitiveDetector(sensitive);
    gas_6_logical->SetSensitiveDetector(sensitive);
    gas_7_logical->SetSensitiveDetector(sensitive);
    strip_logical->SetSensitiveDetector(sensitive);
    glue_strip_logical->SetSensitiveDetector(sensitive);
    glue_block_logical->SetSensitiveDetector(sensitive);
    insulator_block_logical->SetSensitiveDetector(sensitive);
    resistive_strip_logical->SetSensitiveDetector(sensitive);
    mesh_square_logical->SetSensitiveDetector(sensitive);
    frame_logical->SetSensitiveDetector(sensitive);
    mylar_logical->SetSensitiveDetector(sensitive);
    topPCB_logical->SetSensitiveDetector(sensitive);
    topBrass_logical->SetSensitiveDetector(sensitive);
    
    
    
    // --------------------
    //
    //  Visualization Atributes
    //
    // ---------------------
    G4VisAttributes* visAttributes = new G4VisAttributes(G4Colour(1.0,1.0,1.0));
    visAttributes->SetVisibility(false); // invisible
    world_logical->SetVisAttributes(visAttributes);
    detectorVol_logical->SetVisAttributes(visAttributes);
    
    
    visAttributes = new G4VisAttributes(G4Colour(0.25,0.93,0.41));
    pcb_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.9,0.9,0.9,0.2));
    gas_1_logical->SetVisAttributes(visAttributes);
    gas_2_logical->SetVisAttributes(visAttributes);
    gas_3_logical->SetVisAttributes(visAttributes);
    gas_4_logical->SetVisAttributes(visAttributes);
    gas_5_logical->SetVisAttributes(visAttributes);
    gas_6_logical->SetVisAttributes(visAttributes);
    gas_7_logical->SetVisAttributes(visAttributes);
    
    
    visAttributes = new G4VisAttributes(G4Colour(0.,0.502,1.));
    glue_block_logical->SetVisAttributes(visAttributes);
    glue_strip_logical->SetVisAttributes(visAttributes);
    
    
    visAttributes = new G4VisAttributes(G4Colour(0.86, 0.42, 0.20));
    strip_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.196, 0.64, 0.86));
    resistive_strip_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.84, 0.71, 0.58, 0.6));
    insulator_block_logical->SetVisAttributes(visAttributes);
    pillar_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.84, 0.08, 0.42));
    mesh_square_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.941, 0.941, 0.941, 1.0));
    frame_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.5412, 0.239, 0.1176, 0.9));
    mylar_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.8912, 0.8667, 0.2039));
    topPCB_logical->SetVisAttributes(visAttributes);
    
    visAttributes = new G4VisAttributes(G4Colour(0.9882, 0.545098, 0.2470588));
    topBrass_logical->SetVisAttributes(visAttributes);
    
    
    return world_physical;
    
    
    
    
}
